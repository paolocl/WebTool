<?php

namespace Proxies\__CG__\ORMBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Site extends \ORMBundle\Entity\Site implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'id', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'idSite', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'md5', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'nom', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'idFtps', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'idRegistrar', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'idSqls', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'idIps', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'idHosts', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'idTypeProjet', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'idAnalytics', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'page_speed', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'urls', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'ftps', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'analytics', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'registrar', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'sqls', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'ips', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'hosts', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'type_projet', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'log', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'back_office'];
        }

        return ['__isInitialized__', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'id', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'idSite', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'md5', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'nom', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'idFtps', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'idRegistrar', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'idSqls', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'idIps', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'idHosts', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'idTypeProjet', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'idAnalytics', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'page_speed', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'urls', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'ftps', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'analytics', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'registrar', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'sqls', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'ips', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'hosts', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'type_projet', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'log', '' . "\0" . 'ORMBundle\\Entity\\Site' . "\0" . 'back_office'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Site $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdSite($idSite)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdSite', [$idSite]);

        return parent::setIdSite($idSite);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdSite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdSite', []);

        return parent::getIdSite();
    }

    /**
     * {@inheritDoc}
     */
    public function setMd5($md5)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMd5', [$md5]);

        return parent::setMd5($md5);
    }

    /**
     * {@inheritDoc}
     */
    public function getMd5()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMd5', []);

        return parent::getMd5();
    }

    /**
     * {@inheritDoc}
     */
    public function setNom($nom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNom', [$nom]);

        return parent::setNom($nom);
    }

    /**
     * {@inheritDoc}
     */
    public function getNom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNom', []);

        return parent::getNom();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdFtps($idFtps)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdFtps', [$idFtps]);

        return parent::setIdFtps($idFtps);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdFtps()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdFtps', []);

        return parent::getIdFtps();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdRegistrar($idRegistrar)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdRegistrar', [$idRegistrar]);

        return parent::setIdRegistrar($idRegistrar);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdRegistrar()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdRegistrar', []);

        return parent::getIdRegistrar();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdSqls($idSqls)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdSqls', [$idSqls]);

        return parent::setIdSqls($idSqls);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdSqls()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdSqls', []);

        return parent::getIdSqls();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdIps($idIps)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdIps', [$idIps]);

        return parent::setIdIps($idIps);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdIps()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdIps', []);

        return parent::getIdIps();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdHosts($idHosts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdHosts', [$idHosts]);

        return parent::setIdHosts($idHosts);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdHosts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdHosts', []);

        return parent::getIdHosts();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdTypeProjet($idTypeProjet)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdTypeProjet', [$idTypeProjet]);

        return parent::setIdTypeProjet($idTypeProjet);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdTypeProjet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdTypeProjet', []);

        return parent::getIdTypeProjet();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdAnalytics($idAnalytics)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdAnalytics', [$idAnalytics]);

        return parent::setIdAnalytics($idAnalytics);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdAnalytics()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdAnalytics', []);

        return parent::getIdAnalytics();
    }

    /**
     * {@inheritDoc}
     */
    public function setPageSpeed(\ORMBundle\Entity\PageSpeed $pageSpeed = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPageSpeed', [$pageSpeed]);

        return parent::setPageSpeed($pageSpeed);
    }

    /**
     * {@inheritDoc}
     */
    public function getPageSpeed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPageSpeed', []);

        return parent::getPageSpeed();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrls(\ORMBundle\Entity\Urls $urls = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrls', [$urls]);

        return parent::setUrls($urls);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrls()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrls', []);

        return parent::getUrls();
    }

    /**
     * {@inheritDoc}
     */
    public function setFtps(\ORMBundle\Entity\Ftps $ftps = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFtps', [$ftps]);

        return parent::setFtps($ftps);
    }

    /**
     * {@inheritDoc}
     */
    public function getFtps()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFtps', []);

        return parent::getFtps();
    }

    /**
     * {@inheritDoc}
     */
    public function setAnalytics(\ORMBundle\Entity\Analytics $analytics = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAnalytics', [$analytics]);

        return parent::setAnalytics($analytics);
    }

    /**
     * {@inheritDoc}
     */
    public function getAnalytics()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAnalytics', []);

        return parent::getAnalytics();
    }

    /**
     * {@inheritDoc}
     */
    public function setRegistrar(\ORMBundle\Entity\Registrar $registrar = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRegistrar', [$registrar]);

        return parent::setRegistrar($registrar);
    }

    /**
     * {@inheritDoc}
     */
    public function getRegistrar()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegistrar', []);

        return parent::getRegistrar();
    }

    /**
     * {@inheritDoc}
     */
    public function setSqls(\ORMBundle\Entity\Sqls $sqls = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSqls', [$sqls]);

        return parent::setSqls($sqls);
    }

    /**
     * {@inheritDoc}
     */
    public function getSqls()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSqls', []);

        return parent::getSqls();
    }

    /**
     * {@inheritDoc}
     */
    public function setIps(\ORMBundle\Entity\Ips $ips = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIps', [$ips]);

        return parent::setIps($ips);
    }

    /**
     * {@inheritDoc}
     */
    public function getIps()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIps', []);

        return parent::getIps();
    }

    /**
     * {@inheritDoc}
     */
    public function setHosts(\ORMBundle\Entity\Hosts $hosts = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHosts', [$hosts]);

        return parent::setHosts($hosts);
    }

    /**
     * {@inheritDoc}
     */
    public function getHosts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHosts', []);

        return parent::getHosts();
    }

    /**
     * {@inheritDoc}
     */
    public function setTypeProjet(\ORMBundle\Entity\TypeProjet $typeProjet = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypeProjet', [$typeProjet]);

        return parent::setTypeProjet($typeProjet);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeProjet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeProjet', []);

        return parent::getTypeProjet();
    }

    /**
     * {@inheritDoc}
     */
    public function setLog(\ORMBundle\Entity\Log $log = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLog', [$log]);

        return parent::setLog($log);
    }

    /**
     * {@inheritDoc}
     */
    public function getLog()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLog', []);

        return parent::getLog();
    }

    /**
     * {@inheritDoc}
     */
    public function setBackOffice(\ORMBundle\Entity\BackOffice $backOffice = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBackOffice', [$backOffice]);

        return parent::setBackOffice($backOffice);
    }

    /**
     * {@inheritDoc}
     */
    public function getBackOffice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBackOffice', []);

        return parent::getBackOffice();
    }

}
